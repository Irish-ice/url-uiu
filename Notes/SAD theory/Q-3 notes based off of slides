Got it ✅ — you want a **well-structured master note** that organizes and summarizes everything from **Content 6 (UI Design)** and **Content 7 (SRS)** so you can confidently answer *any* Question 3.

Below is a clean, logically ordered study guide that ties both contents together.

---

# 📘 **CSE 3411 – System Analysis & Design**

## Focus Notes for Question 3 (UI Design + SRS)

---

## 🧩 1. User Interface (UI) Design Basics Content 6 - CSE 3411_SAD_Spring…

### 🟢 Definition

> The User Interface is the visible, interactive part of software through which users communicate with the system (graphical, voice, or command line).
> 

### 🟢 Steps of UI Design

1. **Planning** – Understand requirements; define theme & navigation.
2. **Prototyping & Sketching** – Create mock-ups (Figma, Canva etc.).
3. **Optimization** – Refine for efficiency & usability.
4. **Implementation** – Finalize and integrate feedback.

---

## 🧩 2. Golden Rules of UI Design Content 6 - CSE 3411_SAD_Spring…

### **Three Golden Rules**

1. **Place the user in control**
    
    – Allow undo/redo, provide flexibility, navigability, and clear messages.
    
    **Example:** A form that lets users go back or edit answers.
    
2. **Reduce the user’s memory load**
    
    – Rely on *recognition not recall*; give cues, defaults, and visual clarity.
    
    **Example:** Auto-filled usernames or drop-down suggestions.
    
3. **Make the interface consistent**
    
    – Maintain uniform layout, icons, colors, and terminology.
    
    **Example:** Same “Save” icon across all pages.
    

---

### **Shneiderman’s Eight Golden Rules**

1. **Strive for Consistency** – Uniform patterns & terminology.
2. **Seek Universal Usability** – Accessible to all ages & abilities.
3. **Offer Informative Feedback** – Always show current system status.
4. **Design Dialogs to Yield Closure** – Confirm completion with messages.
5. **Prevent Errors** – Guide users; validate inputs.
6. **Permit Easy Reversal of Actions** – Enable Undo/Cancel.
7. **Let Users Feel in Control** – Allow customization.
8. **Reduce Short-Term Memory Load** – Use icons & visible controls.

---

### **Norman’s Seven Design Principles**

| # | Principle | Key Idea |
| --- | --- | --- |
| 1 | **Discoverability** | Users easily find what actions are possible. |
| 2 | **Feedback** | System shows results of user actions. |
| 3 | **Conceptual Model** | Design matches user’s mental model. |
| 4 | **Affordance** | Visual elements suggest their use (e.g., buttons look clickable). |
| 5 | **Signifiers** | Cues indicate where to act (e.g., highlighted CTA buttons). |
| 6 | **Mapping** | Controls match effects (e.g., top button → top light). |
| 7 | **Constraints** | Limit choices to prevent errors. |

---

## 🧩 3. Applying UI Design Rules to Exam Questions

### **A. UI Design Principles Questions**

Use:

- Three Golden Rules → Control / Memory / Consistency.
- Shneiderman’s Eight → Error prevention, Feedback, Closure.
- Norman’s Seven → Discoverability, Feedback, Constraints.

### **B. UI Design Tasks (“Draw or Design a UI”)**

Structure your answer:

1. Purpose & Target User
2. Main Sections (Headers, Navigation, Content, Footer)
3. Principles Used (Consistency, Feedback, Affordance etc.)
4. Justify Usability & Error Prevention

### **C. Example Topics**

- Checkout process
- Dashboard / Homepage layout
- Login / Landing page wireframe

---

## 🧩 4. Software Requirement Specification (SRS) Content 7 - CSE 3411_SAD_Spring…

### 🟢 Definition

> A formal document describing what the software must do and the constraints under which it must operate – the contract between client and developer.
> 

### 🟢 Purpose of SRS

- Defines scope & objectives.
- Basis for design, testing, and maintenance.
- Aligns developer and customer expectations.

---

## 🧩 5. Structure of an SRS

| Section | Description |
| --- | --- |
| **Purpose** | Why the document exists and what it covers. |
| **Scope** | Overall working and value to customer. |
| **Overview** | Product description and goals. |
| **Functional Requirements** | What the system must do (inputs, outputs, behaviors). |
| **Interface Requirements** | How components or users interact. |
| **Performance Requirements** | Time, speed, capacity targets. |
| **Design Constraints** | Hardware, software, or regulatory limitations. |
| **Non-Functional Attributes** | Usability, Security, Scalability, Reliability etc. |
| **Preliminary Schedule & Budget** | High-level plan for development. |

---

## 🧩 6. Functional vs Non-Functional Requirements Content 7 - CSE 3411_SAD_Spring…

| Type | Meaning | Examples |
| --- | --- | --- |
| **Functional** | Describe actions or services the system provides | Login, Search, Generate Report |
| **Non-Functional** | Define quality attributes of performance | Security, Reliability, Ease of Use, Speed |

---

## 🧩 7. Validation and Characteristics of a Good SRS

### **Validation Goal**

Ensure the document is *Complete and Correct* before development.

### **Common SRS Errors**

1. Omission – Missing requirements.
2. Inconsistency – Contradictory statements.
3. Incorrect Facts.
4. Ambiguity.

---

### **Characteristics (“3 C’s” + More)**Content 7 - CSE 3411_SAD_Spring…

| Property | Meaning | Example |
| --- | --- | --- |
| **Correctness** | Reflects true needs of system. | Report frequency matches client expectation. |
| **Completeness** | All functional scenarios included. | Login covers valid & invalid cases. |
| **Consistency** | No contradictory requirements. | Same password length rule everywhere. |
| **Unambiguity** | One clear interpretation only. | “Loads within 3 seconds” instead of “quickly.” |
| **Modifiability** | Easy to update changes. | Structured with unique IDs. |
| **Traceability** | Each requirement linked to its origin. | REQ-15 ↔ client story. |
| **Verifiability** | Can be tested. | “Supports 500 users” is verifiable. |
| **Testability** | Allows test case creation. | “1000 transactions/sec” target. |
| **Comprehensibility** | Readable by customers. | Plain language used. |
| **Feasibility** | Realistic within resources. | 3 s load on server = feasible. |

---

## 🧩 8. Using SRS in Exam Answers

### **A. Define & Explain 3C Properties**

> A good SRS must be Complete, Correct, and Consistent, ensuring it covers all requirements, accurately represents the user needs, and contains no contradictions.
> 

### **B. Functional & Non-Functional Example Pattern**

> Functional Requirements – User login, Payment processing, Report generation
> 
> 
> *Non-Functional Requirements* – Performance (≤ 2 s load), Security (Encryption), Usability (Intuitive interface)
> 

### **C. SRS as Blueprint**

> It acts as a contract and guideline for design, implementation, testing, and maintenance, ensuring all stakeholders share a common vision.
> 

---

## 🧩 9. Integrating UI Design + SRS for Full Marks Answers

| Common Question Type | Combine These Concepts |
| --- | --- |
| Explain 3C in SRS | Use definitions from Content 7 (pages 14–16) + examples. |
| Draw/Design UI Page | Use Golden & Norman Rules from Content 6 (pages 7–33). |
| Functional / Non-Functional Req | Use Content 7 Structure + real-world example (e.g., UCAM, HealthHub). |
| Consistency Error Example | Use “Strive for Consistency” rule + simple UI case (example of color/icon mismatch). |
| Explain SRS as Blueprint | Mention purpose, stakeholders, validation importance. |

---

# 🧠 Final Revision Summary

**For UI Design Questions:**

👉 Remember → “User Control, Memory, Consistency, Feedback, Error Prevention.”

**For SRS Questions:**

👉 Remember → “3C + Functional vs Non-Functional + Validation + Traceability.”

---

Would you like me to turn this structured note into a **print-ready PDF summary sheet** (with highlighted key terms and section dividers)?

It would serve as your final **“Question 3 Cheat Sheet”** for quick revision.